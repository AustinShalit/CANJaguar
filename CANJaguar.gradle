defineWpiUtilProperties()
defineHALProperties()
defineNetworkTablesProperties()
defineWpiLibProperties()

def CANJaguarSetupModel = { project ->
    project.model {
        components {
            CANJaguar(NativeLibrarySpec) {
                targetPlatform 'arm'
                setupDefines(project, binaries)

                binaries.all {
                    tasks.withType(CppCompile) {
                        addUserLinks(linker, targetPlatform, false)
                        addHalLibraryLinks(it, linker, targetPlatform)
                        addWpiUtilLibraryLinks(it, linker, targetPlatform)
                        addNetworkTablesLibraryLinks(it, linker, targetPlatform)
                        addWpilibLibraryLinks(it, linker, targetPlatform)
                    }
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/CANJaguar/src"]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/CANJaguar/include", "${rootDir}/libraries/CANJaguar/include", wpilibInclude, halInclude, wpiUtilInclude, netTablesInclude]
                            includes = ['**/*.h']
                        }
                    }
                }
            }
        }
    }
}

def CANJaguarZipTask = { pjt ->
    pjt.ext.CANJaguarZip = pjt.tasks.create("CANJaguarZip", Zip) {
        description = 'Creates platform-specific zip of the desktop CANJaguar libraries.'
        group = 'WPILib'
        destinationDir = releaseDir
        baseName = 'CANJaguar-cpp'
        duplicatesStrategy = 'exclude'

        // Copy include files from project
        from(file('CANJaguar/include')) {
            into 'include'
        }

        // Copy shared and static binaries from this project
        pjt.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into 'lib'
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into 'lib'
                    }
                    def debugFile = new File(binary.sharedLibraryFile.absolutePath + ".debug")
                      from(debugFile) {
                          into 'lib'
                      }
                }
            }
        }
        
        // Copy included driver library binaries
        from(file('libraries/CANJaguarDriver/lib')) {
            include '*.so*'
            include '*.a*'
            into 'lib'
        }
        
        // Copy included library headers
        from(file('libraries/CANJaguar/include')) {
            into 'include'
        }
        
        // Copy included library binaries
        from(file('libraries/CANJaguar/lib')) {
            include '*.so*'
            include '*.a*'
            into 'lib'
        }
        
        from (file('CANJaguarDriver/include')) {
            into 'include'
            // We don't want to include any of the .cpp files that are in some of the header directories
            exclude '**/*.cpp'
        }

    }

    pjt.build.dependsOn pjt.CANJaguarZip

    pjt.debugStripSetup()

    pjt.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("canjaguarsharedlibrary") || name.contains("canjaguarstaticlibrary")) {
            pjt.CANJaguarZip.dependsOn task
        }
    }
}

def JavaZipTask = { project ->
    project.ext.JavaZip = project.tasks.create("JavaZip", Zip) {
        description = 'Creates a zip of the Java libraries.'
        group = 'WPILib'
        destinationDir = releaseDir
        baseName = 'CANJaguar-java'
        duplicatesStrategy = 'exclude'
        dependsOn { project.jar }
        dependsOn { project.CANJaguarJavadoc }

        
        // Copy included java binaries
        from(file('libraries/java')) {
            into '/'
        } 
        
        // Copy project java binary
        from project.jar.outputs.files {
            include '*.jar'
            include '*.so*'
            into '/'
        }

        // Copy project java javadocs
        from project.CANJaguarJavadoc.outputs.files {
            include '*.jar'
            include '*.so*'
            into '/'
        }
    }
    
    project.build.dependsOn project.JavaZip
    
    project.debugStripSetup()
    
    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("canjaguarsharedlibrary") || name.contains("canjaguarsharedlibrary")) {
            project.JavaZip.dependsOn task
        }
    }
}

def JavaSourceZipTask = { project ->
    project.ext.JavaZip = project.tasks.create("JavaSourceZip", Zip) {
      description = 'Creates a zip of the Java sources.'
      group = 'WPILib'
      destinationDir = releaseDir
      baseName = 'CANJaguar-javasources'
      duplicatesStrategy = 'exclude'
      dependsOn { project.CANJaguarJavaSource }

      from project.CANJaguarJavaSource.outputs.files {
          include '*.jar'
          include '*.so*'
          into '/'
      }
    }
    
    project.build.dependsOn project.JavaZip
    
    project.debugStripSetup()
    
    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("canjaguarsharedlibrary") || name.contains("canjaguarsharedlibrary")) {
            project.JavaZip.dependsOn task
        }
    }
}

project(':arm:CANJaguar') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/arm.gradle"
    
    if (includeJava) {
        apply from: "${rootDir}/java/java.gradle"
    }

    CANJaguarSetupModel(project)
    CANJaguarZipTask(project)
    JavaZipTask(project)
    JavaSourceZipTask(project)
}

task CANJaguarSourceZip(type: Zip) {
    description = 'Creates a sources-zip of the CANJaguar source files'
    group = 'WPILib'
    destinationDir = releaseDir
    baseName = 'CANJaguar'
    classifier = "cppsources"
    duplicatesStrategy = 'exclude'

    from('CANJaguar/src') {
        into 'src'
    }

    from('CANJaguar/include') {
        into 'include'
    }
}
